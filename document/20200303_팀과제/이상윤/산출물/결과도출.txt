--------------------데이터 넣기 시간(add)-------------------------
1) 가장느린구조 (배열에 있는 데이터를 for each문으로 넣기)
2) 중간구조 (list 크기의 반은 앞으로 넣기, 나머지는 뒤로 넣기)
3) 가장빠른구조 (그냥 데이터 넣기)
--------------------------------------------------------------------
1. LinkedList<Integer> (LinkedList.class)
1) 11551000 11623400 11675900 11533700 11545300 11471300 11569100 11672800 11480700 11662200
2) 8852600 8821500 8909300 8712500 8688300 8773600 8778200 8811200 8838400 8905800
3) 7820100 7733500 7691400 7839200 7847000 7767700 7802200 7986900 7890200 7788900

2. CopyList<Integer> (Vector 참고 및 배열 추가)
1) 13039900 13000800 13010400 13207000 13139700 13669200 12869900 13340700 13139200 13198900
*2) 10789900 10630800 10500000 10695800 10489600 10673300 10523700 10507800 10772400 10433800
3) 9419400 9378700 9212200 9401000 9596400 9475000 9166800 9277300 9466500 9218400

3. CopyList2<Integer> (ArrayList 참고 및 배열 추가)
1) 13816600 13816600 14014900 14308000 13944100 13810300 13838400 14107300 14069700 14021400
2) 11343100 11329100 11179000 11329500 11143100 11293800 11214600 11130400 11145300 11251100
3) 10130700 9991100 10065800 10021700 9887000 9901200 9968100 9976000 9887100 10099100


4. CopyList<Integer> + doubly
1)
2)
3)

5. CopyList2<Integer> + doubly
1)
2)
3)

6. 새로운방법



--------------------------------------------------------------------------------------
get 실험

(새로운방법 : peek()안에 요소 밀어내기 추가<header, next 자리 교환식>)


-------------------------------------------------------------------------------------

add 중간구조, get 중간구조 결과값 => 클래스 재수정

클래스 재수정 : 효과적인 튜닝 필요?!

꾸준히 새로운 방법이 생기거나 코드화/산출물 생기면 공유

