--------------------데이터 넣기 시간(add)-------------------------
1) 가장느린구조 (배열에 있는 데이터를 for each문으로 넣기)
2) 중간구조 (list 크기의 반은 앞으로 넣기, 나머지는 뒤로 넣기)
3) 가장빠른구조 (그냥 데이터 넣기)
---------------------------------------------------------------------
1. LinkedList<Integer> (LinkedList.class)
1) 11551000 11623400 11675900 11533700 11545300 11471300 11569100 11672800 11480700 11662200
2) 8852600 8821500 8909300 8712500 8688300 8773600 8778200 8811200 8838400 8905800
3) 7820100 7733500 7691400 7839200 7847000 7767700 7802200 7986900 7890200 7788900

2. CopyList<Integer> (Vector 참고 및 배열 추가)
1) 13039900 13000800 13010400 13207000 13139700 13669200 12869900 13340700 13139200 13198900
2) 10789900 10630800 10500000 10695800 10489600 10673300 10523700 10507800 10772400 10433800
3) 9419400 9378700 9212200 9401000 9596400 9475000 9166800 9277300 9466500 9218400

3. CopyList2<Integer> (ArrayList 참고 및 배열 추가)
1) 13816600 13816600 14014900 14308000 13944100 13810300 13838400 14107300 14069700 14021400
2) 11343100 11329100 11179000 11329500 11143100 11293800 11214600 11130400 11145300 11251100
3) 10130700 9991100 10065800 10021700 9887000 9901200 9968100 9976000 9887100 10099100

4. CopyList3<Integer> (Entry의 element를 ArrayList로 변경, ArrayList 공간 확장)
1) 14842200 14636700 14484300 14697100 14621900 14732300 14690900 14983600 14788500 14953500
2) 12953800 12925100 13250100 13130100 12884900 13214700 13191600 13093200 12943300 13130200
3) 9828700 10066300 10553400 9926800 9952700 9872700 9877400 9883300 9875000 9770800

5. CopyList4<Integer> (Entry의 element를 ArrayList로 변경, ArrayList 객체 생성)
1) 
2) 14652200 14558400 14221500 14505900 14603700 14776700 14484000 14468100 14671400 14822600
3) 9600200 9774500 9691300 9679200 9558100 9928400 9631600 9762000 9618400 9685300

6. CopyList5<Integer> (doubly로 변경)
1)
2)
3)



--------------------데이터 넣기 시간(get)---------------------------------------------------
1. LinkedList (LinkedList.class)
2. CopyList (Vector 참고 및 배열 추가)
3. CopyList2 (ArrayList 참고 및 배열 추가)
4. CopyList3 (Entry의 element를 ArrayList로 변경, ArrayList 공간 확장)
5. CopyList4 (Entry의 element를 ArrayList로 변경, ArrayList 객체 생성, 최대공간 10)
6. CopyList4 (Entry의 element를 ArrayList로 변경, ArrayList 객체 생성, 최대공간 100)
7. CopyList4 (Entry의 element를 ArrayList로 변경, ArrayList 객체 생성, 최대공간 1000)
----------------------------------------------------------------------------------------------
1. 3865985301 3872089700 3843494000 3845289900 3937618300 3869865301 3860325400 3857038199 3825042900 3841207999

2. 2310600 2377600 2241799 2392600 2256800 2342700 2563600 2376900 2251100 2292200

3. 2500900 2647200 2513200 2440300 2490300 2370200 2419200 2475400 2567800 2568500

4. 5939200 6210300 5723100 6438900 5993400 5764800 5941200 6254400 6455100 5865900

5. 2165394300 2188356700 2156883600 2136643600 2171048800 2179299600 2145674900 2180727400 2183803100 2173192100

6. 79606700 81268900 80325300 79237100 82662100 79966500 80161900 78427800 81259500 80178600

7. 10258500 10181200 10563600 10616300 10411000 10281500 10491100 10145200 10132800 10017600



--------------------데이터 넣기 시간(SequentialGet)-------------------------
SequentialGet()은 peek()동작에서 변형을 하다 새로 구현한 메소드이다.
1. LinkedList (LinkedList.class)
2. CopyList (Vector 참고 및 배열 추가)
3. CopyList2 (ArrayList 참고 및 배열 추가)
4. CopyList3 (Entry의 element를 ArrayList로 변경, ArrayList 공간 확장)
5. CopyList4 (Entry의 element를 ArrayList로 변경, ArrayList 객체 생성, 최대공간 10)
--------------------------------------------------------------------------------
1. 3294600 3369300 3445500 3332500 3276500 3516200 3498700 3447700 3277900 3442300

2.

3.

4.

5.


